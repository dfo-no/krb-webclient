/* tslint:disable */
/* eslint-disable */
/**
 * kravbank-backend API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CodeForm
 */
export interface CodeForm {
    /**
     * 
     * @type {string}
     * @memberof CodeForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeForm
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeForm
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CodelistForm
 */
export interface CodelistForm {
    /**
     * 
     * @type {string}
     * @memberof CodelistForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodelistForm
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodelistForm
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface NeedForm
 */
export interface NeedForm {
    /**
     * 
     * @type {string}
     * @memberof NeedForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof NeedForm
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof NeedForm
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Principal
 */
export interface Principal {
    /**
     * 
     * @type {string}
     * @memberof Principal
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ProductForm
 */
export interface ProductForm {
    /**
     * 
     * @type {string}
     * @memberof ProductForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductForm
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductForm
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductForm
     */
    'requirementVariantRef'?: string;
}
/**
 * 
 * @export
 * @interface ProjectForm
 */
export interface ProjectForm {
    /**
     * 
     * @type {string}
     * @memberof ProjectForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectForm
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectForm
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PublicationForm
 */
export interface PublicationForm {
    /**
     * 
     * @type {string}
     * @memberof PublicationForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicationForm
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicationForm
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof PublicationForm
     */
    'version'?: number;
}
/**
 * 
 * @export
 * @interface RequirementForm
 */
export interface RequirementForm {
    /**
     * 
     * @type {string}
     * @memberof RequirementForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequirementForm
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequirementForm
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequirementForm
     */
    'needRef'?: string;
}
/**
 * 
 * @export
 * @interface RequirementVariantForm
 */
export interface RequirementVariantForm {
    /**
     * 
     * @type {string}
     * @memberof RequirementVariantForm
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequirementVariantForm
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequirementVariantForm
     */
    'requirementText'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequirementVariantForm
     */
    'instruction'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RequirementVariantForm
     */
    'useProduct'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RequirementVariantForm
     */
    'useSpecification'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RequirementVariantForm
     */
    'useQualification'?: boolean;
}

/**
 * AdminResourceApi - axios parameter creator
 * @export
 */
export const AdminResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testApiV1AdminGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/api/v1/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminResourceApi - functional programming interface
 * @export
 */
export const AdminResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testApiV1AdminGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testApiV1AdminGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminResourceApi - factory interface
 * @export
 */
export const AdminResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testApiV1AdminGet(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.testApiV1AdminGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminResourceApi - object-oriented interface
 * @export
 * @class AdminResourceApi
 * @extends {BaseAPI}
 */
export class AdminResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminResourceApi
     */
    public testApiV1AdminGet(options?: AxiosRequestConfig) {
        return AdminResourceApiFp(this.configuration).testApiV1AdminGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CodeResourceApi - axios parameter creator
 * @export
 */
export const CodeResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete: async (codeRef: string, codelistRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete', 'codeRef', codeRef)
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}/codes/{codeRef}`
                .replace(`{${"codeRef"}}`, encodeURIComponent(String(codeRef)))
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet: async (codeRef: string, codelistRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet', 'codeRef', codeRef)
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}/codes/{codeRef}`
                .replace(`{${"codeRef"}}`, encodeURIComponent(String(codeRef)))
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodeForm} [codeForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut: async (codeRef: string, codelistRef: string, projectRef: string, codeForm?: CodeForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut', 'codeRef', codeRef)
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}/codes/{codeRef}`
                .replace(`{${"codeRef"}}`, encodeURIComponent(String(codeRef)))
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codeForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet: async (codelistRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}/codes`
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodeForm} [codeForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost: async (codelistRef: string, projectRef: string, codeForm?: CodeForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}/codes`
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codeForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodeResourceApi - functional programming interface
 * @export
 */
export const CodeResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodeResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete(codeRef: string, codelistRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete(codeRef, codelistRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet(codeRef: string, codelistRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet(codeRef, codelistRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodeForm} [codeForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut(codeRef: string, codelistRef: string, projectRef: string, codeForm?: CodeForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut(codeRef, codelistRef, projectRef, codeForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet(codelistRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet(codelistRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodeForm} [codeForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost(codelistRef: string, projectRef: string, codeForm?: CodeForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost(codelistRef, projectRef, codeForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CodeResourceApi - factory interface
 * @export
 */
export const CodeResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodeResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete(codeRef: string, codelistRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete(codeRef, codelistRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet(codeRef: string, codelistRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet(codeRef, codelistRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} codeRef 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodeForm} [codeForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut(codeRef: string, codelistRef: string, projectRef: string, codeForm?: CodeForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut(codeRef, codelistRef, projectRef, codeForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet(codelistRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet(codelistRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodeForm} [codeForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost(codelistRef: string, projectRef: string, codeForm?: CodeForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost(codelistRef, projectRef, codeForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CodeResourceApi - object-oriented interface
 * @export
 * @class CodeResourceApi
 * @extends {BaseAPI}
 */
export class CodeResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} codeRef 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete(codeRef: string, codelistRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return CodeResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefDelete(codeRef, codelistRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} codeRef 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet(codeRef: string, codelistRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return CodeResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefGet(codeRef, codelistRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} codeRef 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {CodeForm} [codeForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut(codeRef: string, codelistRef: string, projectRef: string, codeForm?: CodeForm, options?: AxiosRequestConfig) {
        return CodeResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefCodesCodeRefPut(codeRef, codelistRef, projectRef, codeForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet(codelistRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return CodeResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefCodesGet(codelistRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {CodeForm} [codeForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost(codelistRef: string, projectRef: string, codeForm?: CodeForm, options?: AxiosRequestConfig) {
        return CodeResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefCodesPost(codelistRef, projectRef, codeForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CodelistResourceApi - axios parameter creator
 * @export
 */
export const CodelistResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefDelete: async (codelistRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefDelete', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefDelete', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}`
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefGet: async (codelistRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefGet', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}`
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodelistForm} [codelistForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefPut: async (codelistRef: string, projectRef: string, codelistForm?: CodelistForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codelistRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefPut', 'codelistRef', codelistRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsCodelistRefPut', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists/{codelistRef}`
                .replace(`{${"codelistRef"}}`, encodeURIComponent(String(codelistRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codelistForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsGet: async (projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {CodelistForm} [codelistForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsPost: async (projectRef: string, codelistForm?: CodelistForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefCodelistsPost', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/codelists`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(codelistForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodelistResourceApi - functional programming interface
 * @export
 */
export const CodelistResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodelistResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefDelete(codelistRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefDelete(codelistRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefGet(codelistRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefGet(codelistRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodelistForm} [codelistForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsCodelistRefPut(codelistRef: string, projectRef: string, codelistForm?: CodelistForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsCodelistRefPut(codelistRef, projectRef, codelistForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsGet(projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsGet(projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {CodelistForm} [codelistForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefCodelistsPost(projectRef: string, codelistForm?: CodelistForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefCodelistsPost(projectRef, codelistForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CodelistResourceApi - factory interface
 * @export
 */
export const CodelistResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodelistResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefDelete(codelistRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefDelete(codelistRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefGet(codelistRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefGet(codelistRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} codelistRef 
         * @param {string} projectRef 
         * @param {CodelistForm} [codelistForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsCodelistRefPut(codelistRef: string, projectRef: string, codelistForm?: CodelistForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsCodelistRefPut(codelistRef, projectRef, codelistForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsGet(projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsGet(projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {CodelistForm} [codelistForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefCodelistsPost(projectRef: string, codelistForm?: CodelistForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefCodelistsPost(projectRef, codelistForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CodelistResourceApi - object-oriented interface
 * @export
 * @class CodelistResourceApi
 * @extends {BaseAPI}
 */
export class CodelistResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodelistResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefDelete(codelistRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return CodelistResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefDelete(codelistRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodelistResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefGet(codelistRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return CodelistResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefGet(codelistRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} codelistRef 
     * @param {string} projectRef 
     * @param {CodelistForm} [codelistForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodelistResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsCodelistRefPut(codelistRef: string, projectRef: string, codelistForm?: CodelistForm, options?: AxiosRequestConfig) {
        return CodelistResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsCodelistRefPut(codelistRef, projectRef, codelistForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodelistResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsGet(projectRef: string, options?: AxiosRequestConfig) {
        return CodelistResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsGet(projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {CodelistForm} [codelistForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodelistResourceApi
     */
    public apiV1ProjectsProjectRefCodelistsPost(projectRef: string, codelistForm?: CodelistForm, options?: AxiosRequestConfig) {
        return CodelistResourceApiFp(this.configuration).apiV1ProjectsProjectRefCodelistsPost(projectRef, codelistForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NeedResourceApi - axios parameter creator
 * @export
 */
export const NeedResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsGet: async (projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/needs`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsNeedRefDelete: async (needRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'needRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsNeedRefDelete', 'needRef', needRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsNeedRefDelete', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/needs/{needRef}`
                .replace(`{${"needRef"}}`, encodeURIComponent(String(needRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsNeedRefGet: async (needRef: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'needRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsNeedRefGet', 'needRef', needRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsNeedRefGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/needs/{needRef}`
                .replace(`{${"needRef"}}`, encodeURIComponent(String(needRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {NeedForm} [needForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsNeedRefPut: async (needRef: string, projectRef: string, needForm?: NeedForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'needRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsNeedRefPut', 'needRef', needRef)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsNeedRefPut', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/needs/{needRef}`
                .replace(`{${"needRef"}}`, encodeURIComponent(String(needRef)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(needForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {NeedForm} [needForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsPost: async (projectRef: string, needForm?: NeedForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefNeedsPost', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/needs`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(needForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NeedResourceApi - functional programming interface
 * @export
 */
export const NeedResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NeedResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefNeedsGet(projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefNeedsGet(projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefNeedsNeedRefDelete(needRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefNeedsNeedRefDelete(needRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefNeedsNeedRefGet(needRef: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefNeedsNeedRefGet(needRef, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {NeedForm} [needForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefNeedsNeedRefPut(needRef: string, projectRef: string, needForm?: NeedForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefNeedsNeedRefPut(needRef, projectRef, needForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {NeedForm} [needForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefNeedsPost(projectRef: string, needForm?: NeedForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefNeedsPost(projectRef, needForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NeedResourceApi - factory interface
 * @export
 */
export const NeedResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NeedResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsGet(projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefNeedsGet(projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsNeedRefDelete(needRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefNeedsNeedRefDelete(needRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsNeedRefGet(needRef: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefNeedsNeedRefGet(needRef, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} needRef 
         * @param {string} projectRef 
         * @param {NeedForm} [needForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsNeedRefPut(needRef: string, projectRef: string, needForm?: NeedForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefNeedsNeedRefPut(needRef, projectRef, needForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {NeedForm} [needForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefNeedsPost(projectRef: string, needForm?: NeedForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefNeedsPost(projectRef, needForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NeedResourceApi - object-oriented interface
 * @export
 * @class NeedResourceApi
 * @extends {BaseAPI}
 */
export class NeedResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedResourceApi
     */
    public apiV1ProjectsProjectRefNeedsGet(projectRef: string, options?: AxiosRequestConfig) {
        return NeedResourceApiFp(this.configuration).apiV1ProjectsProjectRefNeedsGet(projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} needRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedResourceApi
     */
    public apiV1ProjectsProjectRefNeedsNeedRefDelete(needRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return NeedResourceApiFp(this.configuration).apiV1ProjectsProjectRefNeedsNeedRefDelete(needRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} needRef 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedResourceApi
     */
    public apiV1ProjectsProjectRefNeedsNeedRefGet(needRef: string, projectRef: string, options?: AxiosRequestConfig) {
        return NeedResourceApiFp(this.configuration).apiV1ProjectsProjectRefNeedsNeedRefGet(needRef, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} needRef 
     * @param {string} projectRef 
     * @param {NeedForm} [needForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedResourceApi
     */
    public apiV1ProjectsProjectRefNeedsNeedRefPut(needRef: string, projectRef: string, needForm?: NeedForm, options?: AxiosRequestConfig) {
        return NeedResourceApiFp(this.configuration).apiV1ProjectsProjectRefNeedsNeedRefPut(needRef, projectRef, needForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {NeedForm} [needForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedResourceApi
     */
    public apiV1ProjectsProjectRefNeedsPost(projectRef: string, needForm?: NeedForm, options?: AxiosRequestConfig) {
        return NeedResourceApiFp(this.configuration).apiV1ProjectsProjectRefNeedsPost(projectRef, needForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductResourceApi - axios parameter creator
 * @export
 */
export const ProductResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsGet: async (projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/products`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {ProductForm} [productForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsPost: async (projectRef: string, productForm?: ProductForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsPost', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/products`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsProductrefDelete: async (productref: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsProductrefDelete', 'productref', productref)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsProductrefDelete', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/products/{productref}`
                .replace(`{${"productref"}}`, encodeURIComponent(String(productref)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsProductrefGet: async (productref: string, projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsProductrefGet', 'productref', productref)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsProductrefGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/products/{productref}`
                .replace(`{${"productref"}}`, encodeURIComponent(String(productref)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {ProductForm} [productForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsProductrefPut: async (productref: string, projectRef: string, productForm?: ProductForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsProductrefPut', 'productref', productref)
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefProductsProductrefPut', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/products/{productref}`
                .replace(`{${"productref"}}`, encodeURIComponent(String(productref)))
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductResourceApi - functional programming interface
 * @export
 */
export const ProductResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefProductsGet(projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefProductsGet(projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {ProductForm} [productForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefProductsPost(projectRef: string, productForm?: ProductForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefProductsPost(projectRef, productForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefProductsProductrefDelete(productref: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefProductsProductrefDelete(productref, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefProductsProductrefGet(productref: string, projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefProductsProductrefGet(productref, projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {ProductForm} [productForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefProductsProductrefPut(productref: string, projectRef: string, productForm?: ProductForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefProductsProductrefPut(productref, projectRef, productForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductResourceApi - factory interface
 * @export
 */
export const ProductResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsGet(projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefProductsGet(projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {ProductForm} [productForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsPost(projectRef: string, productForm?: ProductForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefProductsPost(projectRef, productForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsProductrefDelete(productref: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefProductsProductrefDelete(productref, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsProductrefGet(productref: string, projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefProductsProductrefGet(productref, projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productref 
         * @param {string} projectRef 
         * @param {ProductForm} [productForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefProductsProductrefPut(productref: string, projectRef: string, productForm?: ProductForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefProductsProductrefPut(productref, projectRef, productForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductResourceApi - object-oriented interface
 * @export
 * @class ProductResourceApi
 * @extends {BaseAPI}
 */
export class ProductResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public apiV1ProjectsProjectRefProductsGet(projectRef: string, options?: AxiosRequestConfig) {
        return ProductResourceApiFp(this.configuration).apiV1ProjectsProjectRefProductsGet(projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {ProductForm} [productForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public apiV1ProjectsProjectRefProductsPost(projectRef: string, productForm?: ProductForm, options?: AxiosRequestConfig) {
        return ProductResourceApiFp(this.configuration).apiV1ProjectsProjectRefProductsPost(projectRef, productForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productref 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public apiV1ProjectsProjectRefProductsProductrefDelete(productref: string, projectRef: string, options?: AxiosRequestConfig) {
        return ProductResourceApiFp(this.configuration).apiV1ProjectsProjectRefProductsProductrefDelete(productref, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productref 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public apiV1ProjectsProjectRefProductsProductrefGet(productref: string, projectRef: string, options?: AxiosRequestConfig) {
        return ProductResourceApiFp(this.configuration).apiV1ProjectsProjectRefProductsProductrefGet(productref, projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productref 
     * @param {string} projectRef 
     * @param {ProductForm} [productForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductResourceApi
     */
    public apiV1ProjectsProjectRefProductsProductrefPut(productref: string, projectRef: string, productForm?: ProductForm, options?: AxiosRequestConfig) {
        return ProductResourceApiFp(this.configuration).apiV1ProjectsProjectRefProductsProductrefPut(productref, projectRef, productForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectResourceApi - axios parameter creator
 * @export
 */
export const ProjectResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProjectForm} [projectForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsPost: async (projectForm?: ProjectForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefDelete: async (projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefDelete', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefGet: async (projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {ProjectForm} [projectForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefPut: async (projectRef: string, projectForm?: ProjectForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefPut', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectResourceApi - functional programming interface
 * @export
 */
export const ProjectResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProjectForm} [projectForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsPost(projectForm?: ProjectForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsPost(projectForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefDelete(projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefDelete(projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefGet(projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefGet(projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {ProjectForm} [projectForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefPut(projectRef: string, projectForm?: ProjectForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefPut(projectRef, projectForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectResourceApi - factory interface
 * @export
 */
export const ProjectResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProjectForm} [projectForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsPost(projectForm?: ProjectForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsPost(projectForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefDelete(projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefDelete(projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefGet(projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefGet(projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {ProjectForm} [projectForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefPut(projectRef: string, projectForm?: ProjectForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefPut(projectRef, projectForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectResourceApi - object-oriented interface
 * @export
 * @class ProjectResourceApi
 * @extends {BaseAPI}
 */
export class ProjectResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectResourceApi
     */
    public apiV1ProjectsGet(options?: AxiosRequestConfig) {
        return ProjectResourceApiFp(this.configuration).apiV1ProjectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProjectForm} [projectForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectResourceApi
     */
    public apiV1ProjectsPost(projectForm?: ProjectForm, options?: AxiosRequestConfig) {
        return ProjectResourceApiFp(this.configuration).apiV1ProjectsPost(projectForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectResourceApi
     */
    public apiV1ProjectsProjectRefDelete(projectRef: string, options?: AxiosRequestConfig) {
        return ProjectResourceApiFp(this.configuration).apiV1ProjectsProjectRefDelete(projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectResourceApi
     */
    public apiV1ProjectsProjectRefGet(projectRef: string, options?: AxiosRequestConfig) {
        return ProjectResourceApiFp(this.configuration).apiV1ProjectsProjectRefGet(projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {ProjectForm} [projectForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectResourceApi
     */
    public apiV1ProjectsProjectRefPut(projectRef: string, projectForm?: ProjectForm, options?: AxiosRequestConfig) {
        return ProjectResourceApiFp(this.configuration).apiV1ProjectsProjectRefPut(projectRef, projectForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicationResourceApi - axios parameter creator
 * @export
 */
export const PublicationResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsGet: async (projectref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsGet', 'projectref', projectref)
            const localVarPath = `/api/v1/projects/{projectref}/publications`
                .replace(`{${"projectref"}}`, encodeURIComponent(String(projectref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectref 
         * @param {PublicationForm} [publicationForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPost: async (projectref: string, publicationForm?: PublicationForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPost', 'projectref', projectref)
            const localVarPath = `/api/v1/projects/{projectref}/publications`
                .replace(`{${"projectref"}}`, encodeURIComponent(String(projectref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicationForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPublicationrefDelete: async (projectref: string, publicationref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPublicationrefDelete', 'projectref', projectref)
            // verify required parameter 'publicationref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPublicationrefDelete', 'publicationref', publicationref)
            const localVarPath = `/api/v1/projects/{projectref}/publications/{publicationref}`
                .replace(`{${"projectref"}}`, encodeURIComponent(String(projectref)))
                .replace(`{${"publicationref"}}`, encodeURIComponent(String(publicationref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPublicationrefGet: async (projectref: string, publicationref: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPublicationrefGet', 'projectref', projectref)
            // verify required parameter 'publicationref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPublicationrefGet', 'publicationref', publicationref)
            const localVarPath = `/api/v1/projects/{projectref}/publications/{publicationref}`
                .replace(`{${"projectref"}}`, encodeURIComponent(String(projectref)))
                .replace(`{${"publicationref"}}`, encodeURIComponent(String(publicationref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {PublicationForm} [publicationForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPublicationrefPut: async (projectref: string, publicationref: string, publicationForm?: PublicationForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPublicationrefPut', 'projectref', projectref)
            // verify required parameter 'publicationref' is not null or undefined
            assertParamExists('apiV1ProjectsProjectrefPublicationsPublicationrefPut', 'publicationref', publicationref)
            const localVarPath = `/api/v1/projects/{projectref}/publications/{publicationref}`
                .replace(`{${"projectref"}}`, encodeURIComponent(String(projectref)))
                .replace(`{${"publicationref"}}`, encodeURIComponent(String(publicationref)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicationForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicationResourceApi - functional programming interface
 * @export
 */
export const PublicationResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicationResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectrefPublicationsGet(projectref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectrefPublicationsGet(projectref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectref 
         * @param {PublicationForm} [publicationForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectrefPublicationsPost(projectref: string, publicationForm?: PublicationForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectrefPublicationsPost(projectref, publicationForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectrefPublicationsPublicationrefDelete(projectref: string, publicationref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectrefPublicationsPublicationrefDelete(projectref, publicationref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectrefPublicationsPublicationrefGet(projectref: string, publicationref: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectrefPublicationsPublicationrefGet(projectref, publicationref, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {PublicationForm} [publicationForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectrefPublicationsPublicationrefPut(projectref: string, publicationref: string, publicationForm?: PublicationForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectrefPublicationsPublicationrefPut(projectref, publicationref, publicationForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicationResourceApi - factory interface
 * @export
 */
export const PublicationResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicationResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsGet(projectref: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectrefPublicationsGet(projectref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectref 
         * @param {PublicationForm} [publicationForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPost(projectref: string, publicationForm?: PublicationForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectrefPublicationsPost(projectref, publicationForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPublicationrefDelete(projectref: string, publicationref: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectrefPublicationsPublicationrefDelete(projectref, publicationref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPublicationrefGet(projectref: string, publicationref: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectrefPublicationsPublicationrefGet(projectref, publicationref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectref 
         * @param {string} publicationref 
         * @param {PublicationForm} [publicationForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectrefPublicationsPublicationrefPut(projectref: string, publicationref: string, publicationForm?: PublicationForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectrefPublicationsPublicationrefPut(projectref, publicationref, publicationForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicationResourceApi - object-oriented interface
 * @export
 * @class PublicationResourceApi
 * @extends {BaseAPI}
 */
export class PublicationResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} projectref 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationResourceApi
     */
    public apiV1ProjectsProjectrefPublicationsGet(projectref: string, options?: AxiosRequestConfig) {
        return PublicationResourceApiFp(this.configuration).apiV1ProjectsProjectrefPublicationsGet(projectref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectref 
     * @param {PublicationForm} [publicationForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationResourceApi
     */
    public apiV1ProjectsProjectrefPublicationsPost(projectref: string, publicationForm?: PublicationForm, options?: AxiosRequestConfig) {
        return PublicationResourceApiFp(this.configuration).apiV1ProjectsProjectrefPublicationsPost(projectref, publicationForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectref 
     * @param {string} publicationref 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationResourceApi
     */
    public apiV1ProjectsProjectrefPublicationsPublicationrefDelete(projectref: string, publicationref: string, options?: AxiosRequestConfig) {
        return PublicationResourceApiFp(this.configuration).apiV1ProjectsProjectrefPublicationsPublicationrefDelete(projectref, publicationref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectref 
     * @param {string} publicationref 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationResourceApi
     */
    public apiV1ProjectsProjectrefPublicationsPublicationrefGet(projectref: string, publicationref: string, options?: AxiosRequestConfig) {
        return PublicationResourceApiFp(this.configuration).apiV1ProjectsProjectrefPublicationsPublicationrefGet(projectref, publicationref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectref 
     * @param {string} publicationref 
     * @param {PublicationForm} [publicationForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicationResourceApi
     */
    public apiV1ProjectsProjectrefPublicationsPublicationrefPut(projectref: string, publicationref: string, publicationForm?: PublicationForm, options?: AxiosRequestConfig) {
        return PublicationResourceApiFp(this.configuration).apiV1ProjectsProjectrefPublicationsPublicationrefPut(projectref, publicationref, publicationForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequirementResourceApi - axios parameter creator
 * @export
 */
export const RequirementResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsGet: async (projectRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsGet', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {RequirementForm} [requirementForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsPost: async (projectRef: string, requirementForm?: RequirementForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsPost', 'projectRef', projectRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requirementForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefDelete: async (projectRef: string, requirementRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefDelete', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefDelete', 'requirementRef', requirementRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefGet: async (projectRef: string, requirementRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefGet', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefGet', 'requirementRef', requirementRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {RequirementForm} [requirementForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefPut: async (projectRef: string, requirementRef: string, requirementForm?: RequirementForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefPut', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefPut', 'requirementRef', requirementRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requirementForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequirementResourceApi - functional programming interface
 * @export
 */
export const RequirementResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequirementResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsGet(projectRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsGet(projectRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {RequirementForm} [requirementForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsPost(projectRef: string, requirementForm?: RequirementForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsPost(projectRef, requirementForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefDelete(projectRef: string, requirementRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefDelete(projectRef, requirementRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefGet(projectRef: string, requirementRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefGet(projectRef, requirementRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {RequirementForm} [requirementForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefPut(projectRef: string, requirementRef: string, requirementForm?: RequirementForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefPut(projectRef, requirementRef, requirementForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequirementResourceApi - factory interface
 * @export
 */
export const RequirementResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequirementResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsGet(projectRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsGet(projectRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {RequirementForm} [requirementForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsPost(projectRef: string, requirementForm?: RequirementForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsPost(projectRef, requirementForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefDelete(projectRef: string, requirementRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefDelete(projectRef, requirementRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefGet(projectRef: string, requirementRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefGet(projectRef, requirementRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {RequirementForm} [requirementForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefPut(projectRef: string, requirementRef: string, requirementForm?: RequirementForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefPut(projectRef, requirementRef, requirementForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequirementResourceApi - object-oriented interface
 * @export
 * @class RequirementResourceApi
 * @extends {BaseAPI}
 */
export class RequirementResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} projectRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsGet(projectRef: string, options?: AxiosRequestConfig) {
        return RequirementResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsGet(projectRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {RequirementForm} [requirementForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsPost(projectRef: string, requirementForm?: RequirementForm, options?: AxiosRequestConfig) {
        return RequirementResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsPost(projectRef, requirementForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefDelete(projectRef: string, requirementRef: string, options?: AxiosRequestConfig) {
        return RequirementResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefDelete(projectRef, requirementRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefGet(projectRef: string, requirementRef: string, options?: AxiosRequestConfig) {
        return RequirementResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefGet(projectRef, requirementRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {RequirementForm} [requirementForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefPut(projectRef: string, requirementRef: string, requirementForm?: RequirementForm, options?: AxiosRequestConfig) {
        return RequirementResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefPut(projectRef, requirementRef, requirementForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequirementVariantResourceApi - axios parameter creator
 * @export
 */
export const RequirementVariantResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet: async (projectRef: string, requirementRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet', 'requirementRef', requirementRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}/requirementvariants`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {RequirementVariantForm} [requirementVariantForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost: async (projectRef: string, requirementRef: string, requirementVariantForm?: RequirementVariantForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost', 'requirementRef', requirementRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}/requirementvariants`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requirementVariantForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete: async (projectRef: string, requirementRef: string, requirementVariantRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete', 'requirementRef', requirementRef)
            // verify required parameter 'requirementVariantRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete', 'requirementVariantRef', requirementVariantRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}/requirementvariants/{requirementVariantRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)))
                .replace(`{${"requirementVariantRef"}}`, encodeURIComponent(String(requirementVariantRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet: async (projectRef: string, requirementRef: string, requirementVariantRef: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet', 'requirementRef', requirementRef)
            // verify required parameter 'requirementVariantRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet', 'requirementVariantRef', requirementVariantRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}/requirementvariants/{requirementVariantRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)))
                .replace(`{${"requirementVariantRef"}}`, encodeURIComponent(String(requirementVariantRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {RequirementVariantForm} [requirementVariantForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut: async (projectRef: string, requirementRef: string, requirementVariantRef: string, requirementVariantForm?: RequirementVariantForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut', 'projectRef', projectRef)
            // verify required parameter 'requirementRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut', 'requirementRef', requirementRef)
            // verify required parameter 'requirementVariantRef' is not null or undefined
            assertParamExists('apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut', 'requirementVariantRef', requirementVariantRef)
            const localVarPath = `/api/v1/projects/{projectRef}/requirements/{requirementRef}/requirementvariants/{requirementVariantRef}`
                .replace(`{${"projectRef"}}`, encodeURIComponent(String(projectRef)))
                .replace(`{${"requirementRef"}}`, encodeURIComponent(String(requirementRef)))
                .replace(`{${"requirementVariantRef"}}`, encodeURIComponent(String(requirementVariantRef)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requirementVariantForm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequirementVariantResourceApi - functional programming interface
 * @export
 */
export const RequirementVariantResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequirementVariantResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet(projectRef: string, requirementRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet(projectRef, requirementRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {RequirementVariantForm} [requirementVariantForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost(projectRef: string, requirementRef: string, requirementVariantForm?: RequirementVariantForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost(projectRef, requirementRef, requirementVariantForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete(projectRef: string, requirementRef: string, requirementVariantRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete(projectRef, requirementRef, requirementVariantRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet(projectRef: string, requirementRef: string, requirementVariantRef: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet(projectRef, requirementRef, requirementVariantRef, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {RequirementVariantForm} [requirementVariantForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut(projectRef: string, requirementRef: string, requirementVariantRef: string, requirementVariantForm?: RequirementVariantForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut(projectRef, requirementRef, requirementVariantRef, requirementVariantForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequirementVariantResourceApi - factory interface
 * @export
 */
export const RequirementVariantResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequirementVariantResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet(projectRef: string, requirementRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet(projectRef, requirementRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {RequirementVariantForm} [requirementVariantForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost(projectRef: string, requirementRef: string, requirementVariantForm?: RequirementVariantForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost(projectRef, requirementRef, requirementVariantForm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete(projectRef: string, requirementRef: string, requirementVariantRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete(projectRef, requirementRef, requirementVariantRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet(projectRef: string, requirementRef: string, requirementVariantRef: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet(projectRef, requirementRef, requirementVariantRef, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectRef 
         * @param {string} requirementRef 
         * @param {string} requirementVariantRef 
         * @param {RequirementVariantForm} [requirementVariantForm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut(projectRef: string, requirementRef: string, requirementVariantRef: string, requirementVariantForm?: RequirementVariantForm, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut(projectRef, requirementRef, requirementVariantRef, requirementVariantForm, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequirementVariantResourceApi - object-oriented interface
 * @export
 * @class RequirementVariantResourceApi
 * @extends {BaseAPI}
 */
export class RequirementVariantResourceApi extends BaseAPI {
    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementVariantResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet(projectRef: string, requirementRef: string, options?: AxiosRequestConfig) {
        return RequirementVariantResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsGet(projectRef, requirementRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {RequirementVariantForm} [requirementVariantForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementVariantResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost(projectRef: string, requirementRef: string, requirementVariantForm?: RequirementVariantForm, options?: AxiosRequestConfig) {
        return RequirementVariantResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsPost(projectRef, requirementRef, requirementVariantForm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {string} requirementVariantRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementVariantResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete(projectRef: string, requirementRef: string, requirementVariantRef: string, options?: AxiosRequestConfig) {
        return RequirementVariantResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefDelete(projectRef, requirementRef, requirementVariantRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {string} requirementVariantRef 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementVariantResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet(projectRef: string, requirementRef: string, requirementVariantRef: string, options?: AxiosRequestConfig) {
        return RequirementVariantResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefGet(projectRef, requirementRef, requirementVariantRef, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectRef 
     * @param {string} requirementRef 
     * @param {string} requirementVariantRef 
     * @param {RequirementVariantForm} [requirementVariantForm] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequirementVariantResourceApi
     */
    public apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut(projectRef: string, requirementRef: string, requirementVariantRef: string, requirementVariantForm?: RequirementVariantForm, options?: AxiosRequestConfig) {
        return RequirementVariantResourceApiFp(this.configuration).apiV1ProjectsProjectRefRequirementsRequirementRefRequirementvariantsRequirementVariantRefPut(projectRef, requirementRef, requirementVariantRef, requirementVariantForm, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnwrapResourceApi - axios parameter creator
 * @export
 */
export const UnwrapResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UnwrapUploadPdfPost: async (body?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/unwrap/uploadPdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnwrapResourceApi - functional programming interface
 * @export
 */
export const UnwrapResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnwrapResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UnwrapUploadPdfPost(body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UnwrapUploadPdfPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnwrapResourceApi - factory interface
 * @export
 */
export const UnwrapResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnwrapResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UnwrapUploadPdfPost(body?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1UnwrapUploadPdfPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnwrapResourceApi - object-oriented interface
 * @export
 * @class UnwrapResourceApi
 * @extends {BaseAPI}
 */
export class UnwrapResourceApi extends BaseAPI {
    /**
     * 
     * @param {File} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnwrapResourceApi
     */
    public apiV1UnwrapUploadPdfPost(body?: File, options?: AxiosRequestConfig) {
        return UnwrapResourceApiFp(this.configuration).apiV1UnwrapUploadPdfPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserResourceApi - axios parameter creator
 * @export
 */
export const UserResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testApiV1UsersInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/api/v1/users/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testApiV1UsersUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test/api/v1/users/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "SecurityScheme", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserResourceApi - functional programming interface
 * @export
 */
export const UserResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testApiV1UsersInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testApiV1UsersInfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testApiV1UsersUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Principal; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testApiV1UsersUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserResourceApi - factory interface
 * @export
 */
export const UserResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testApiV1UsersInfoGet(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.testApiV1UsersInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testApiV1UsersUserGet(options?: any): AxiosPromise<{ [key: string]: Principal; }> {
            return localVarFp.testApiV1UsersUserGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserResourceApi - object-oriented interface
 * @export
 * @class UserResourceApi
 * @extends {BaseAPI}
 */
export class UserResourceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public testApiV1UsersInfoGet(options?: AxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).testApiV1UsersInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserResourceApi
     */
    public testApiV1UsersUserGet(options?: AxiosRequestConfig) {
        return UserResourceApiFp(this.configuration).testApiV1UsersUserGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WrapResourceApi - axios parameter creator
 * @export
 */
export const WrapResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WrapPrefilledPost: async (body?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wrap/prefilled`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WrapReportPost: async (body?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wrap/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WrapSpecificationPost: async (body?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/wrap/specification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WrapResourceApi - functional programming interface
 * @export
 */
export const WrapResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WrapResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WrapPrefilledPost(body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WrapPrefilledPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WrapReportPost(body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WrapReportPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WrapSpecificationPost(body?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WrapSpecificationPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WrapResourceApi - factory interface
 * @export
 */
export const WrapResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WrapResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WrapPrefilledPost(body?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WrapPrefilledPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WrapReportPost(body?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WrapReportPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WrapSpecificationPost(body?: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1WrapSpecificationPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WrapResourceApi - object-oriented interface
 * @export
 * @class WrapResourceApi
 * @extends {BaseAPI}
 */
export class WrapResourceApi extends BaseAPI {
    /**
     * 
     * @param {File} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WrapResourceApi
     */
    public apiV1WrapPrefilledPost(body?: File, options?: AxiosRequestConfig) {
        return WrapResourceApiFp(this.configuration).apiV1WrapPrefilledPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WrapResourceApi
     */
    public apiV1WrapReportPost(body?: File, options?: AxiosRequestConfig) {
        return WrapResourceApiFp(this.configuration).apiV1WrapReportPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WrapResourceApi
     */
    public apiV1WrapSpecificationPost(body?: File, options?: AxiosRequestConfig) {
        return WrapResourceApiFp(this.configuration).apiV1WrapSpecificationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}


